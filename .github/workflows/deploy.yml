# Nom du workflow CI/CD
name: CI/CD Pipeline

# Déclencheurs du workflow
on:
  push:
    branches:
      - master

jobs:
  # Job de test
  test:
    runs-on: ubuntu-latest

    # Configuration des services nécessaires pour les tests
    services:
      postgres:
        image: postgres:14
        ports:
          - 5440:5432
        env:
          POSTGRES_DB: great_danes
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: 12345
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de l'environnement PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, intl, pdo, pdo_pgsql
          coverage: none

      # Étape 3 : Configuration du cache Composer
      - name: Get composer cache directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_ENV

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Étape 4 : Installation des dépendances
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      # Étape 5 : Configuration de la base de données de test
      - name: Set up database
        env:
          DATABASE_URL: postgres://db_user:12345@127.0.0.1:5440/great_danes
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test

      # Étape 6 : Exécution des migrations
      - name: Execute migrations
        run: php bin/console doctrine:migrations:migrate --no-interaction --env=test

      # Étape 7 : Exécution des tests
      - name: Run tests
        run: ./vendor/bin/phpunit

  # Job de déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: test # Le déploiement ne s'exécute que si les tests réussissent

    # Configuration des services nécessaires pour le déploiement
    services:
      postgres:
        image: postgres:14
        ports:
          - 5440:5432
        env:
          POSTGRES_DB: great_danes
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: 12345
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de l'environnement PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, intl, pdo, pdo_pgsql
          coverage: none

      # Étape 3 : Installation des dépendances pour la production
      - name: Install dependencies
        env:
          APP_ENV: prod
        run: composer install --no-dev --optimize-autoloader

      # Étape 4 : Configuration de la base de données de production
      - name: Set up database
        env:
          DATABASE_URL: postgres://db_user:12345@127.0.0.1:5440/great_danes
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=prod

      # Étape 5 : Exécution des migrations en production
      - name: Execute migrations
        run: php bin/console doctrine:migrations:migrate --no-interaction --env=prod

      # Étape 6 : Déploiement sur le serveur de production
      - name: Deploy to production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          APP_ENV: prod
        run: |
          # Création d'un fichier de clé privée SSH temporaire
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          # Synchronisation des fichiers avec le serveur distant
          rsync -avz --exclude='/.git/' -e "ssh -i private_key" ./ $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH
          # Exécution des commandes post-déploiement sur le serveur distant
          ssh -i private_key $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH && composer install --no-dev --optimize-autoloader && php bin/console cache:clear --env=prod && php bin/console doctrine:migrations:migrate --no-interaction --env=prod"
          # Suppression du fichier de clé privée temporaire
          rm private_key
